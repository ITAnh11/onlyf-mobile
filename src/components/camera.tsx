import React, { useState, useRef } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Button, Image, InteractionManager, Switch } from 'react-native';
import { CameraView, CameraType, useCameraPermissions, Camera } from 'expo-camera';
import * as ImageManipulator from 'expo-image-manipulator';
import * as ImagePicker from 'expo-image-picker';
import { useMediaLibraryPermissions } from 'expo-image-picker';


interface CustomCameraProps {
  onPhotoTaken: (compressedUri: string) => void;
}

const CustomCamera = ({ onPhotoTaken }: CustomCameraProps) => {
    const [photo, setPhoto] = useState<string | null>(null);
    const cameraRef = useRef<CameraView>(null);
    const [facing, setFacing] = useState<CameraType>('back');
    const [permission, requestPermission] = useCameraPermissions();
    const [cameraMode, setCameraMode] = useState(true); // Th√™m state ƒë·ªÉ qu·∫£n l√Ω ch·∫ø ƒë·ªô camera, true l√† photo, false l√† video
    const [permission_library, requestPermission_library ] = useMediaLibraryPermissions();

  //qu·∫£n l√Ω tr·∫°ng th√°i quay video
  const [isRecording, setIsRecording] = useState(false);
  const [video, setVideo] = useState<any | null>(null); // Add state for video
  const [recordingTime, setRecordingTime] = useState(0); // Th·ªùi gian quay video (t√≠nh b·∫±ng gi√¢y)
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  };

  // H√†m ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa ch·∫ø ƒë·ªô ch·ª•p ·∫£nh v√† quay video
  const toggleCameraMode = () => {
    setCameraMode((currentMode) => (currentMode === true ? false : true)); // Chuy·ªÉn ƒë·ªïi gi·ªØa ch·∫ø ƒë·ªô ch·ª•p ·∫£nh v√† quay video
  };
  
  const startRecording = async () => {
    if (!cameraRef.current) {
      console.error('Camera kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o.');
      return;
    }
    try {
      // B·∫Øt ƒë·∫ßu quay video
      console.log('B·∫Øt ƒë·∫ßu quay video...');
      setIsRecording(true);
      // ƒê·∫∑t th·ªùi gian quay video v·ªÅ 0 tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
      setRecordingTime(0);
      // Kh·ªüi t·∫°o b·ªô ƒë·∫øm th·ªùi gian
      timerRef.current = setInterval(() => {
        setRecordingTime((prevTime) => prevTime + 1); // TƒÉng th·ªùi gian m·ªói gi√¢y
      }, 1000);

      const videoData = await cameraRef.current.recordAsync({
        maxDuration: 60, // Gi·ªõi h·∫°n th·ªùi gian quay video
      });
  
      if (videoData && videoData.uri) {
        console.log('üìÅ Video URI:', videoData.uri);
        setVideo(videoData.uri); // L∆∞u video v√†o state
        onPhotoTaken(videoData.uri); // G·ªçi h√†m callback v·ªõi ƒë∆∞·ªùng d·∫´n video
      } else {
        console.error('‚ùå Video recording failed or returned undefined data.');
      }
    } catch (error) {
      console.error('‚ùå L·ªói quay video:', error);
    } finally {
      setIsRecording(false);
    }
  };

  const stopRecording = () => {
    if (!cameraRef.current) {
      console.error('Camera kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o.');
      return;
    }

    setIsRecording(false);
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }
    setRecordingTime(0); // ƒê·∫∑t th·ªùi gian quay video v·ªÅ 0 khi d·ª´ng quay
    cameraRef.current.stopRecording();
  };

  //y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera
  if (!permission) {
    return <View />;
  }


  // H√†m ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa camera tr∆∞·ªõc v√† sau
  function toggleCameraFacing() {
    setFacing(current => (current === 'back' ? 'front' : 'back'));
  }

  // H√†m ch·ª•p ·∫£nh
    async function takePicture() {
        if (cameraRef.current) {
            const photoData = await cameraRef.current.takePictureAsync();
            if (photoData && photoData.uri) {
                setPhoto(photoData.uri); // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh v√†o tr·∫°ng th√°i
                const compressedUri = await compressImage(photoData.uri); // N√©n ·∫£nh
                onPhotoTaken(compressedUri); // G·ªçi h√†m callback v·ªõi ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë√£ n√©n
            }
        }
    }


  // H√†m n√©n ·∫£nh tr∆∞·ªõc khi upload
  async function compressImage(uri: string): Promise<string> {
        const result = await ImageManipulator.manipulateAsync(
          uri,
          [],
          {
            compress: 0.7, 
            format: ImageManipulator.SaveFormat.JPEG,
          }
        );
        return result.uri;
  }

  // H√†m l·∫•y ·∫£nh t·ª´ th∆∞ vi·ªán
  async function pickImage() {
  const result = await ImagePicker.launchImageLibraryAsync({
    mediaTypes: ImagePicker.MediaTypeOptions.Images, // Ch·ªâ ch·ªçn ·∫£nh
    allowsEditing: true, // Cho ph√©p ch·ªânh s·ª≠a ·∫£nh
    aspect: [4, 4], // T·ªâ l·ªá khung h√¨nh (tu·ª≥ ch·ªçn)
    quality: 1, // Ch·∫•t l∆∞·ª£ng ·∫£nh (1 l√† cao nh·∫•t)
  });

  if (!result.canceled && result.assets && result.assets.length > 0) {
    const selectedImageUri = result.assets[0].uri; // ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë∆∞·ª£c ch·ªçn
    const compressedUri = await compressImage(selectedImageUri); // G·ªçi callback v·ªõi ƒë∆∞·ªùng d·∫´n ·∫£nh
    onPhotoTaken(compressedUri); // G·ªçi h√†m callback v·ªõi ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë√£ n√©n
  }
}
      


  return (
    <View style={styles.container}>
        {photo ? (
        // Hi·ªÉn th·ªã ·∫£nh ƒë√£ ch·ª•p
            <Image source={{ uri: photo }} style={styles.camera} />
        ) : (
            // Hi·ªÉn th·ªã camera n·∫øu ch∆∞a ch·ª•p ·∫£nh
            <>
              {cameraMode === true ? (
                  <CameraView ref={cameraRef} style={styles.camera} facing={facing}/> 
              ) : (
                  <CameraView ref={cameraRef} style={styles.camera} facing={facing} mode="video" /> 
              )}
            
              <View style={styles.toggleCameraModeButton}>
                <Switch
                  trackColor={{ false: '#767577', true: '#81b0ff' }} // M√†u n·ªÅn thanh tr∆∞·ª£t khi t·∫Øt/b·∫≠t
                  thumbColor={cameraMode === true ? '#f5dd4b' : '#f4f3f4'}     // M√†u n√∫t tr∆∞·ª£t (h√¨nh tr√≤n nh·ªè) t√πy v√†o tr·∫°ng th√°i
                  ios_backgroundColor="#3e3e3e"                      // M√†u n·ªÅn c·ªßa switch tr√™n iOS khi ·ªü tr·∫°ng th√°i t·∫Øt
                  onValueChange={toggleCameraMode}                       // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫≠t/t·∫Øt switch
                  value={cameraMode}                                  // Gi√° tr·ªã hi·ªán t·∫°i c·ªßa switch (true/false)
                />
                <Text style={styles.toggleCameraModeText}>
                  {cameraMode === true ? 'Photo' : 'Video'}
                </Text>
              </View>

              {isRecording && (
                <View style={styles.recordingTimeContainer}>
                  <View style = {{height: 10, width: 10, borderRadius: 10, backgroundColor: 'red'}}></View>
                  <Text style={styles.recordingTimeText}>{formatTime(recordingTime)}</Text>
                </View>
              )}
            </>
        )}
        {/* <CameraView style={styles.camera} facing={facing} />       */}
        <View style={styles.buttonContainer}>
            <TouchableOpacity style={styles.get_Picture_button} onPress={pickImage}>
                <Image source={require("../assets/image_icon.png")} resizeMode="contain" style={{ width:30, height: 30 }}/>
            </TouchableOpacity>
            {
                cameraMode === true ? (
                    <TouchableOpacity onPress={takePicture}>
                        <View style={{ width: 100, height: 100, backgroundColor: '#EAA905', borderRadius: 50, alignItems: 'center', justifyContent: 'center' }}>
                            <View style={{ width: 92, height: 92, backgroundColor: 'white', borderRadius: 50, alignItems: 'center', justifyContent: 'center',borderWidth: 4, borderColor: "black" }}/>
                        </View>
                    </TouchableOpacity>
                ) : (            
                  <TouchableOpacity onPress={isRecording ? stopRecording : startRecording}>
                    <View style={{width: 100, height: 100, backgroundColor: isRecording ? 'red' : '#EAA905', borderRadius: 50,alignItems: 'center', justifyContent: 'center',}}>
                      <View style={{width: 92, height: 92, backgroundColor: 'white', borderRadius: 50, alignItems: 'center', justifyContent: 'center', borderWidth: 4, borderColor: 'black',}}>
                        {isRecording ? (
                          <Image source={require("../assets/triangle.png")} resizeMode="contain" style={{ width: 30, height: 30 }} />
                        ) : (
                          <Image source={require("../assets/square.png")} resizeMode="contain" style={{ width: 30, height: 30 }} />
                        )}
                      </View>
                    </View>
                  </TouchableOpacity>
                )}
            <TouchableOpacity style={styles.toggleCameraFacing_button} onPress={toggleCameraFacing}>
                <Image source={require("../assets/circular.png")} resizeMode="contain" style={{ width:30, height: 30 }}/>
            </TouchableOpacity>
        </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'space-between',
    flexDirection: 'column',
  },
  message: {
    textAlign: 'center',
    paddingBottom: 10,
  },
  camera: {
    width: '100%',
    aspectRatio: 1,
    borderRadius: 60,
  },
  buttonContainer: {
    marginTop: 80,
    marginBottom: 15,
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  toggleCameraFacing_button: {
    width: '15%',
    aspectRatio: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#333333',
    borderRadius: '50%',
  },
  get_Picture_button: {
    width: '15%',
    aspectRatio: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#333333',
    borderRadius: '50%',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'black',
  },
  toggleCameraModeButton: {
    position: 'absolute', // ƒê·∫∑t v·ªã tr√≠ tuy·ªát ƒë·ªëi
    top: 20, // Kho·∫£ng c√°ch t·ª´ tr√™n xu·ªëng
    right: 20, // Kho·∫£ng c√°ch t·ª´ ph·∫£i sang
    backgroundColor: 'rgba(0, 0, 0, 0.5)', // N·ªÅn m·ªù
    padding: 10, // Kho·∫£ng c√°ch b√™n trong n√∫t
    borderRadius: 50, // Bo g√≥c
    flexDirection: 'row', // ƒê·∫∑t c√°c ph·∫ßn t·ª≠ b√™n trong theo h√†ng ngang
    alignItems: 'center', // CƒÉn gi·ªØa theo chi·ªÅu d·ªçc
  },
  toggleCameraModeText: {
    color: 'white', // M√†u ch·ªØ
    fontWeight: 'bold', // Ch·ªØ ƒë·∫≠m
    fontSize: 16, // K√≠ch th∆∞·ªõc ch·ªØ
  },
  recordingTimeContainer: {
    position: 'absolute',
    top: 20, // Kho·∫£ng c√°ch t·ª´ tr√™n xu·ªëng (t√πy ch·ªânh) 
    left: 20, // Kho·∫£ng c√°ch t·ª´ tr√°i sang (t√πy ch·ªânh)
    padding: 10,
    borderRadius: 10,
    alignItems: 'center',
    flexDirection: 'row', 
  },
  recordingTimeText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    marginLeft: 10, // Kho·∫£ng c√°ch gi·ªØa bi·ªÉu t∆∞·ª£ng v√† th·ªùi gian
  },
});

export default CustomCamera;