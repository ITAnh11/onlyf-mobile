import React, { useContext, useEffect, useRef, useState } from 'react';
import { View, Text, TouchableOpacity, StatusBar, Image, Button, FlatList, Platform, ViewToken } from 'react-native';
import { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context';
import { NavigationProp } from '@react-navigation/native';
import { styles } from './styles';
import TokenService from '../../services/token.service';
import apiClient from '../../networking/apiclient';
import CustomCamera from '../../components/camera'; // Ensure this file exists in the specified path
import ProfileApi from '../../networking/profile.api';
import Posting from './components/Posting';
import ButtonList from './components/ButtonList';
import ChoosedButton from './components/ChoosedButton';
import { FriendItem, PostItem } from './components/Type';
import { useCameraPermissions, useMicrophonePermissions } from 'expo-camera';
import { useMediaLibraryPermissions } from 'expo-image-picker';
import { Dimensions } from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from './Global/PostStore';
import { addPost, addPosts, clearPosts, setHasMore, setNextCursor } from './Global/PostSlice';
import PostView from './components/PostView';
import AllImageView from './components/AllImageView';
import ProfileService from '../../services/profile.service';
import 'expo-dev-client';
import { useSearchParams } from './Hooks/useSearchParams';
import { BannerAd, BannerAdSize, TestIds, InterstitialAd, AdEventType } from 'react-native-google-mobile-ads';
import { set } from 'lodash';

type Props = {
  navigation: NavigationProp<any>;
};


const Home: React.FC<Props> = ({ navigation }) => {  
  const [compressedUri, setCompressedUri] = useState<string | null>(null); 

  const [userId, setUserID] = useState<string | number>(); // State ƒë·ªÉ l∆∞u t√™n ng∆∞·ªùi d√πng
  // l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ ProfileService
  ProfileService.getId().then((id) => {
      if (id !== null) {
          setUserID(id); // C·∫≠p nh·∫≠t state userId v·ªõi gi√° tr·ªã t·ª´ ProfileService
      }
  });

  // State ƒë·ªÉ xem ng∆∞·ªùi d√πng c√≥ mu·ªën n·∫°p kh√¥ng
  const [isComfirmedPremium, setIsComfirmedPremium] = useState(false);
  const [isPremium, setIsPremium] = useState(false);
  ProfileService.isPremium()
    .then((isPremium) => {
      setIsPremium(isPremium);
  });
  useEffect(() => {
    if (isComfirmedPremium) {
      navigation.navigate("Payment");
      setIsComfirmedPremium(false);
    }
  }, [isComfirmedPremium]);
  
  // State ƒë·ªÉ theo d√µi tr·∫°ng th√°i quy·ªÅn
  const [permission, requestPermission] = useCameraPermissions();
  const [permission_library, requestPermission_library] = useMediaLibraryPermissions();
  const [microphonePermission, requestMicrophonePermission] = useMicrophonePermissions();
  const [permissionsGranted, setPermissionsGranted] = useState(false); // State ƒë·ªÉ theo d√µi tr·∫°ng th√°i quy·ªÅn


  // State ƒë·ªÉ theo d√µi tr·∫°ng th√°i load c√°c b√†i post
  const [loading, setLoading] = useState(false);

    //useEffect l·∫•y danh s√°ch b·∫°n b√®
  const [friendList, setFriendList] = useState<FriendItem[]>([]);
    useEffect(() => {
      const fetchAPI = async () => {
      try{
        const accessToken = await TokenService.getAccessToken();
        const response = await apiClient.get(`/friend/get-friends`,{
          headers: {
            Authorization: `Bearer ${accessToken}` // Th√™m access token v√†o header
          }
        });
        setFriendList(response.data);
      }catch (error) {
        console.error("L·ªói khi g·ªçi API c·ªßa get Friends:", error); // X·ª≠ l√Ω l·ªói n·∫øu c√≥
      }
    };
    fetchAPI();
  },[]);

  // Kh·ªüi t·∫°o dispatch t·ª´ Redux
  const dispatch = useDispatch(); 

  // C√°c th√¥ng tin v·ªÅ t·∫•t c·∫£ b√†i post
  const danhSach = useSelector((state: RootState) => state.postManager.danhSach);
  const nextCursor = useSelector((state: RootState) => state.postManager.nextCursor);
  const hasMore = useSelector((state: RootState) => state.postManager.hasdmore);

  //trang th√°i ƒëang ·ªü trang c√°c b√†i post hay l√† trang xem t·∫•t c·∫£ ·∫£nh
  const [isAllImageView, setIsAllImageView] = useState(false); 
  const [isLinkToPostView, setIsLinkToPostView] = useState(false);//trang th√°i link t·ª´ ·∫£nh c·ªßa trang AllImageView t·ªõi trang postView
  const [postIndexToLink, setPostIndexToLink] = useState(0); // v·ªã tr√≠ b√†i post ƒë∆∞u·ªçc ch·ªçn ƒë·ªÉ d·∫´n t·ª´ b√™n trang AllPostImageView

  //Tr·∫°ng th√°i xem ƒë√£ ƒëƒÉng b√†i hay ch∆∞a
  const [isPosted, setIsPosted] = useState(false);
  //Trang th√°i xem x√≥a b√†i hay ch∆∞a
  const [isDelete, setIsDelete] = useState(false);
  
  // L·∫•y c√°c tham s·ªë t·ª´ deeplink
  const { params, clearParams } = useSearchParams();
  const [postId, setPostId] = useState<string | null>(null);
  const [ownerId, setOwnerId] = useState<string | null>(null);
  useEffect(() => {
    if (params.postId && params.ownerId) {
      console.log("üìå Nh·∫≠n t·ª´ deeplink:", params);
      // üëâ Th·ª±c hi·ªán h√†nh ƒë·ªông nh∆∞ g·ªçi API, chuy·ªÉn h∆∞·ªõng, alert...
      console.log("ID b√†i vi·∫øt:", params.postId);
      setPostId(params.postId);
      console.log("ID ng∆∞·ªùi d√πng:", params.ownerId);
      setOwnerId(params.ownerId);
      // üëá N·∫øu ch·ªâ mu·ªën x·ª≠ l√Ω 1 l·∫ßn, h√£y reset l·∫°i params
      clearParams();
    }
  }, [params]);

  //State ƒë·ªÉ theo d√µi v·ªã tr√≠ trang hi·ªán t·∫°i trong Flatlist
  const [currentIndex, setCurrentIndex] = useState(0);
  const [backToFirstPage, setBacktoFirstPage] = useState(false);
  const [backToHomePage, setBackToHomePage] = useState(false);
  const [currentPostId, setCurrentPostId] = useState<string | null>(null);
  const onViewRef = useRef(({ viewableItems }: { viewableItems: ViewToken[] }) => {
    if (viewableItems && viewableItems.length > 0) {
      setCurrentIndex(viewableItems[0].index || 0); // c·∫≠p nh·∫≠t index ƒë·∫ßu ti√™n ƒëang hi·ªÉn th·ªã
      const currentItem = viewableItems[0].item; // L·∫•y item ƒë·∫ßu ti√™n ƒëang hi·ªÉn th·ªã
      console.log('Item hi·ªán t·∫°i:', currentItem.id); // Log item.id
      setCurrentPostId(currentItem.id); // C·∫≠p nh·∫≠t item.id hi·ªán t·∫°i
    }
  });
  const viewConfigRef = useRef({ viewAreaCoveragePercentThreshold: 50 });
  // T·∫°o ref cho FlatList
  const flatListRef = useRef<FlatList>(null); 
  useEffect(() => {
  if (
    postId &&
    postId !== '0' &&
    friendList.length > 0 &&
    danhSach.length > 0
  ) {
    // 1. L·∫•y t√™n ng∆∞·ªùi d√πng
    if (ownerId !== null) {
      setIdItem(ownerId);
    }

    const name = friendList.find(
      (item) => String(item.friend.id) === String(ownerId)
    )?.friend?.profile?.name || '';

    setChoosedItem(name);
    setChoosing(false);

    // 2. Cu·ªôn ƒë·∫øn b√†i post t∆∞∆°ng ·ª©ng
    const postIndexToLink = danhSach.findIndex((item) => item.id === postId);
    console.log("‚úÖ T√¨m th·∫•y post t·∫°i index:", postIndexToLink);

    if (postIndexToLink !== -1) {
      flatListRef.current?.scrollToIndex({ index: postIndexToLink + 1, animated: false });
    }

    // 3. Reset l·∫°i postId ƒë·ªÉ kh√¥ng ch·∫°y l·∫°i
    setPostId('0');
  }}, [postId && friendList && danhSach]);
  
  useEffect(() => {
    if (backToFirstPage) {
      flatListRef.current?.scrollToIndex({ index: 1, animated: false }); // Cu·ªôn ƒë·∫øn trang th·ª© 2
      setBacktoFirstPage(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ƒë·ªÉ tr√°nh cu·ªôn l·∫°i li√™n t·ª•c
    }
  
    if (backToHomePage) {
      flatListRef.current?.scrollToIndex({ index: 0, animated: false }); // Cu·ªôn ƒë·∫øn trang th·ª© 1
      setBackToHomePage(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ƒë·ªÉ tr√°nh cu·ªôn l·∫°i li√™n t·ª•c
    }

    if (isLinkToPostView) {
      flatListRef.current?.scrollToIndex({ index: postIndexToLink + 1, animated: false});// +1 do b√™n AllPosstImage kh√¥ng c√≥ trang home
      setIsLinkToPostView(false);
    }
  }, [backToFirstPage, backToHomePage, isLinkToPostView ]);


  //Theo d√µi danh s√°ch c√°c b√†i post (tr·∫°ng th√°i l·ªçc t·∫•t c·∫£ ho·∫∑c c·ªßa m·ªôt ng∆∞·ªùi b·∫°n c·ª• th·ªÉ)
  const [choosedItem, setChoosedItem] = useState("T·∫•t c·∫£ b·∫°n b√®");
  const [idItem, setIdItem] = useState("T·∫•t c·∫£ b·∫°n b√®");
  const [choosing, setChoosing] = useState(false);

  // H√†m kh·ªüi t·∫°o c√°c b√†i post
  const initAllPost = async () => {
    dispatch(addPost({ id: 'home', caption: 'Home', urlPublicImage: '', createdAt: '', user: { id: '', profile: { name: '', urlPublicAvatar: '' } } })); // Th√™m home v√†o danh s√°ch b√†i post
    if (loading) return; // NgƒÉn vi·ªác g·ªçi API nhi·ªÅu l·∫ßn khi ƒëang t·∫£i
    setLoading(true); // B·∫Øt ƒë·∫ßu tr·∫°ng th√°i t·∫£i
    const accessToken = await TokenService.getAccessToken();
    try {
      const response = await apiClient.get(`/post/get-posts/`, {
        params: {
          limit: 50, // S·ªë l∆∞·ª£ng b√†i post mu·ªën l·∫•y
        },
        headers: {
          Authorization: `Bearer ${accessToken}` // Th√™m access token v√†o header
        }
      });
      // console.log("response of POST", response.data.posts); // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
      dispatch(addPosts(response.data.posts)); // C·∫≠p nh·∫≠t state `data` v·ªõi b√†i post m·ªõi
      dispatch(setNextCursor(response.data.nextCursor)); // C·∫≠p nh·∫≠t con tr·ªè ti·∫øp theo
      dispatch(setHasMore(response.data.hasMore)); // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√≥ th√™m b√†i post hay kh√¥ngr
    } catch (error) {
      console.error("L·ªói khi g·ªçi API get POST 1:", error); // X·ª≠ l√Ω l·ªói n·∫øu c√≥
    } finally {
      setLoading(false); // K·∫øt th√∫c tr·∫°ng th√°i t·∫£i
    }
  }
  //useEffect ƒë·ªÉ kh·ªèi t·∫°o c√°c b√†i post ƒë·∫ßu ti√™n
  useEffect(() => {
    initAllPost(); 
  }, []);

  //useEffect ƒë·ªÉ render l·∫°i c√°c b√†i post sau khi ƒëƒÉng ·∫£nh
  useEffect(() => {
    if(isPosted || isDelete) {
      dispatch(clearPosts());
      initAllPost();
      setIsPosted(false);
      setIsDelete(false);
    }
  },[isPosted, isDelete])

  //h√†m thay ƒë·ªïi danh s√°ch b√†i post khi ng∆∞·ªùi d√πng thay ƒë·ªïi l·ª±a ch·ªçn.
  const isFirstRender = useRef(true); // Theo d√µi l·∫ßn render ƒë·∫ßu ti√™n
  useEffect(() => {
    const fetchCards = async () => {
      if (loading) return; // NgƒÉn vi·ªác g·ªçi API nhi·ªÅu l·∫ßn khi ƒëang t·∫£i
      setLoading(true); // B·∫Øt ƒë·∫ßu tr·∫°ng th√°i t·∫£i
      const accessToken = await TokenService.getAccessToken();
      try {
        const params: any = {
          limit: 50, // S·ªë l∆∞·ª£ng b√†i post mu·ªën l·∫•y
        };
        
        let response: any;
        // N·∫øu idItem kh√°c "T·∫•t c·∫£ b·∫°n b√®", th√™m thu·ªôc t√≠nh friendId
        if (idItem !== "T·∫•t c·∫£ b·∫°n b√®" && idItem !== `${userId}`) {
          params.friendId = idItem;
          response  = await apiClient.get(`/post/get-posts/`, {
            params,
            headers: {
              Authorization: `Bearer ${accessToken}`, // Th√™m access token v√†o header
            },
          });
        } else if (idItem === `${userId}`) {
          response  = await apiClient.get(`/post/get-my-posts`, {
            params,
            headers: {
              Authorization: `Bearer ${accessToken}`, // Th√™m access token v√†o header
            },
          });       
        } else {
          response  = await apiClient.get(`/post/get-posts/`, {
            params,
            headers: {
              Authorization: `Bearer ${accessToken}`, // Th√™m access token v√†o header
            },
          });
        }
        dispatch(clearPosts());
        dispatch(addPost({ id: 'home', caption: 'Home', urlPublicImage: '', createdAt: '', user: { id: '', profile: { name: '', urlPublicAvatar: '' } } })); // Th√™m home v√†o danh s√°ch b√†i post
        dispatch(addPosts(response.data.posts)); // C·∫≠p nh·∫≠t state `data` v·ªõi b√†i post m·ªõi
        dispatch(setNextCursor(response.data.nextCursor)); // C·∫≠p nh·∫≠t con tr·ªè ti·∫øp theo
        dispatch(setHasMore(response.data.hasMore)); // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√≥ th√™m b√†i post hay kh√¥ng
        // Ch·ªâ g·ªçi setBacktoFirstPage(true) n·∫øu kh√¥ng ph·∫£i l·∫ßn render ƒë·∫ßu ti√™n
        if (!isFirstRender.current) {
          setBacktoFirstPage(true);
        }
        isFirstRender.current = false; // ƒê√°nh d·∫•u r·∫±ng l·∫ßn render ƒë·∫ßu ti√™n ƒë√£ ho√†n t·∫•t
      } catch (error) {
        console.error("L·ªói khi g·ªçi API get POST 2:", error); // X·ª≠ l√Ω l·ªói n·∫øu c√≥
        console.log(idItem);
        console.log("ID: ", userId); // X·ª≠ l√Ω l·ªói n·∫øu c√≥
      } finally {
        setLoading(false); // K·∫øt th√∫c tr·∫°ng th√°i t·∫£i
      }
    };
    fetchCards();
  }, [idItem]);

  // H√†m g·ªçi API ƒë·ªÉ l·∫•y danh s√°ch b√†i post
  const fetchCards = async () => {
      if (nextCursor !== null && hasMore) { // Ki·ªÉm tra xem c√≥ con tr·ªè ti·∫øp theo v√† c√≤n b√†i post ƒë·ªÉ t·∫£i kh√¥ng
          if (loading) return; // NgƒÉn vi·ªác g·ªçi API nhi·ªÅu l·∫ßn khi ƒëang t·∫£i
          setLoading(true); // B·∫Øt ƒë·∫ßu tr·∫°ng th√°i t·∫£i
          const accessToken = await TokenService.getAccessToken();
          try {
            const params: any = {
              limit: 50, // S·ªë l∆∞·ª£ng b√†i post mu·ªën l·∫•y
              cursor: nextCursor // Tham s·ªë con tr·ªè ƒë·ªÉ ph√¢n trang
            };
            let response: any;
            // N·∫øu idItem kh√°c "T·∫•t c·∫£ b·∫°n b√®", th√™m thu·ªôc t√≠nh friendId
            if (idItem !== "T·∫•t c·∫£ b·∫°n b√®" && idItem !== `${userId}`) {
              params.friendId = idItem;
              response  = await apiClient.get(`/post/get-posts/`, {
                params,
                headers: {
                  Authorization: `Bearer ${accessToken}`, // Th√™m access token v√†o header
                },
              });
            } else if (idItem === `${userId}`) {
              response  = await apiClient.get(`/post/get-my-posts`, {
                params,
                headers: {
                  Authorization: `Bearer ${accessToken}`, // Th√™m access token v√†o header
                },
              });       
            } else {
              response  = await apiClient.get(`/post/get-posts/`, {
                params,
                headers: {
                  Authorization: `Bearer ${accessToken}`, // Th√™m access token v√†o header
                },
              });
            }
            dispatch(addPosts(response.data.posts)); // C·∫≠p nh·∫≠t state `data` v·ªõi b√†i post m·ªõi
            dispatch(setNextCursor(response.data.nextCursor)); // C·∫≠p nh·∫≠t con tr·ªè ti·∫øp theo
            dispatch(setHasMore(response.data.hasMore)); // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√≥ th√™m b√†i post hay kh√¥ngr
          } catch (error) {
            console.error("L·ªói khi g·ªçi API c·ªßa get POST:", error); // X·ª≠ l√Ω l·ªói n·∫øu c√≥
          } finally {
            setLoading(false); // K·∫øt th√∫c tr·∫°ng th√°i t·∫£i
          }
      } else { return; } // N·∫øu kh√¥ng c√≤n b√†i post n√†o ƒë·ªÉ t·∫£i th√™m, kh√¥ng l√†m g√¨ c·∫£
  };

  
  //Ham x·ª≠ l√Ω c·∫•p quy·ªÅn camera v√† th∆∞ vi·ªán ·∫£nh
  const checkPermissions = async () => {
    let cameraGranted = permission?.granted;
    let micGranted = microphonePermission?.granted;
    let libraryGranted = permission_library?.granted;
    if (!cameraGranted) {
      const cameraPermission = await requestPermission();
      cameraGranted = cameraPermission.granted;
    }
    if (!libraryGranted) {
      const libraryPermission = await requestPermission_library();
      libraryGranted = libraryPermission.granted;
    }
    if (!micGranted) {
      const mic = await requestMicrophonePermission();
      micGranted = mic.granted;
    }
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu c·∫£ hai quy·ªÅn ƒë·ªÅu ƒë∆∞·ª£c c·∫•p
    if (cameraGranted && libraryGranted && micGranted) {
      setPermissionsGranted(true);
    }
  };

  useEffect(() => {
    checkPermissions();
  }, []);

  const height = Dimensions.get('screen').height;
  const renderItem = ({ item }: { item: PostItem }) => {
    if (item.id === 'home') {
      return (
        <View >
          {/* N·ªôi dung trang Home gi·ªëng nh∆∞ b·∫°n vi·∫øt ·ªü tr√™n */}
          <SafeAreaView style={{ flexDirection: "column",flex: 1, height: height, backgroundColor: '#111111' }}>
            {permissionsGranted ? (
              compressedUri ? (
                <View style={styles.camera_container}>
                  <Posting compressedUri={compressedUri} setCompressedUri={setCompressedUri} setIsPosted={setIsPosted} setIsComfirmedPremium={setIsComfirmedPremium}/>
                </View>
              ) : (
                <View style={styles.camera_container}>
                  <CustomCamera onPhotoTaken={setCompressedUri} />
                </View>
              )
            ) : (
              <View style={styles.camera_container}>
                <Text>ƒêang ch·ªù c·∫•p quy·ªÅn...</Text>
              </View>
            )}
          </SafeAreaView>
        </View>
      );
    } else {
      return (
        <PostView post={item} setBackToHomePage={setBackToHomePage} setIsAllImageView={setIsAllImageView} currentPostId={currentPostId} setIsDelete={setIsDelete}/> // Hi·ªÉn th·ªã b√†i post
      );
    }

  };

    //Kh·ªüi t·∫°o qu·∫£ng c√°o
    const interstitial = InterstitialAd.createForAdRequest(TestIds.INTERSTITIAL, {
      requestNonPersonalizedAdsOnly: true,
    });
    const currentIndexRef = useRef(currentIndex);
    useEffect(() => {
      currentIndexRef.current = currentIndex; // C·∫≠p nh·∫≠t gi√° tr·ªã ref m·ªói khi currentIndex thay ƒë·ªïi
    }, [currentIndex]);

    //m·ªü qu·∫£ng c√°o khi n√≥ ƒë∆∞·ª£c t·∫£i
    const lastShownRef = useRef(0);
    const showInterstitialAdIfNeeded = () => {
      const now = Date.now();
      const FIVE_MINUTES = 5 * 60 * 1000;
      const enoughTimePassed = now - lastShownRef.current >= FIVE_MINUTES;
  
      if (enoughTimePassed && currentIndexRef.current !== 0 && isPremium === false) {
        const unsubscribe = interstitial.addAdEventListener(AdEventType.LOADED, () => {
          interstitial.show();
          lastShownRef.current = Date.now();
          unsubscribe();
        });
  
        interstitial.load();
      } else {
        console.log('Ch∆∞a ƒë·ªß 5 ph√∫t, ch∆∞a hi·ªÉn th·ªã qu·∫£ng c√°o', currentIndexRef.current);
      }
    };

    // ‚è∞ L·∫∑p l·∫°i qu·∫£ng c√°o m·ªói 5 ph√∫t
    useEffect(() => {
      // Hi·ªÉn th·ªã qu·∫£ng c√°o l·∫ßn ƒë·∫ßu sau khi app m·ªü
      showInterstitialAdIfNeeded();
  
      const interval = setInterval(() => {
        showInterstitialAdIfNeeded();
      }, 5 * 60 * 1000); // 5 ph√∫t
  
      return () => clearInterval(interval);
    }, []);
  
  return (
    <>
      <StatusBar barStyle="light-content" backgroundColor="transparent" translucent />
      <View style={{backgroundColor: '#111111',height: height,justifyContent:'center'}}>
        <View style={styles.list_button}>
            <TouchableOpacity style={[styles.button, { marginLeft: 20 }]} onPress={() => {navigation.navigate("Profile");}}>
              <Image source={require("../../assets/user.png")} resizeMode="contain" style={{ width: 33, height: 33 }} />
            </TouchableOpacity>
            {(currentIndex === 0 && isAllImageView === false) ? (
              <TouchableOpacity style={styles.button_friend} onPress={() => navigation.navigate("Friend")}>
                <Image source={require("../../assets/add-friend.png")} resizeMode="contain" style={{ width: 20, height: 20, marginLeft: 20 }} />
                <Text style = {{fontSize: 15, fontWeight: 'bold', color: "white", marginLeft: 7, marginRight: 20}}>B·∫°n b√®</Text>
              </TouchableOpacity>
            ) : (
              <ChoosedButton choosedItem = {choosedItem} setChoosing={setChoosing}/>
            )}
            <TouchableOpacity style={[styles.button, { marginRight: 20 }]} onPress={() => navigation.navigate("Message")}>
              <Image source={require("../../assets/message.png")} resizeMode="contain" style={{ width: 30, height: 30 }} />
            </TouchableOpacity>
            {/* <Button title="ƒêƒÉng xu·∫•t" onPress={handleLogout} color="#FF0000" /> */}
        </View>

        {
          choosing && (
            <View style = {{height: '100%', width: '100%', backgroundColor: 'rgba(0, 0, 0, 0.3)' , position: 'absolute', zIndex: 10, alignItems: 'center'}}>
              <ButtonList friendList = {friendList} idItem={idItem} setChoosing = {setChoosing} setChoosedItem = {setChoosedItem} setIdItem={setIdItem}/>
            </View>
          )
        }

        { (isAllImageView === false) ? (
            <FlatList
              ref={flatListRef}
              data={danhSach}
              renderItem={({ item }) => renderItem({ item })}
              keyExtractor={(item, index) => item.id === 'home' ? `home-${index}` : item.id.toString()}
              contentContainerStyle={{ flexGrow: 1 }} // ƒê·∫£m b·∫£o FlatList chi·∫øm to√†n b·ªô kh√¥ng gian
              showsVerticalScrollIndicator={false} // ·∫®n thanh cu·ªôn d·ªçc
              onEndReached={fetchCards}
              initialNumToRender={20} // S·ªë l∆∞·ª£ng b√†i post ƒë·∫ßu ti√™n ƒë∆∞·ª£c render
              maxToRenderPerBatch={20} // S·ªë l∆∞·ª£ng b√†i post t·ªëi ƒëa ƒë∆∞·ª£c render m·ªói l·∫ßn
              windowSize={10} // K√≠ch th∆∞·ªõc c·ª≠a s·ªï ƒë·ªÉ render c√°c b√†i post
              onEndReachedThreshold={0.5}
              pagingEnabled={true} // B·∫≠t ch·∫ø ƒë·ªô cu·ªôn trang
              getItemLayout={(_data, index) => (
                { length: height, offset: height * index, index } // Cung c·∫•p chi·ªÅu cao c·ªßa m·ªói m·ª•c
              )}
              onViewableItemsChanged={onViewRef.current}
              viewabilityConfig={viewConfigRef.current}
            />
          ) : (
            <AllImageView setIsAllImageView={setIsAllImageView} danhSach={danhSach} fetchCards={fetchCards} idItem={idItem} setBackToHomePage={setBackToHomePage} setIsLinkToPostView={setIsLinkToPostView} setPostIndexToLink={setPostIndexToLink}/>
          )}
      </View>
    </>
  );
};

export default Home;


